<template>
	<div class="payment">
  <back-arrow title="支付订单" />
		<!-- <div class="time_down payment_group">
			剩余付款时间: <span class="red">59分59秒</span>
		</div> -->

		<van-cell-group>
			<van-cell title="订单编号" :value="orderItem.orderNo" />
			<van-cell title="实付金额"><span class="red">{{orderItem.orderPrice}}</span></van-cell>
		</van-cell-group>

		<div class="pay_way_group">
			<div class="pay_way_title">选择支付方式</div>
			<van-radio-group v-model="payWay">
				<van-cell-group>

					<van-cell @click="payWay='2'" v-if="!wxEnv">
						<van-radio name="2" @click="payWay='2'">
							<img src="../../assets/images/ali_pay.png" alt="支付宝" width="82" height="29">
						</van-radio>
					</van-cell>
					<van-cell @click="payWay='1'">
						<van-radio name="1" @click="payWay='1'">
							<img src="../../assets/images/wx_pay.png" alt="微信支付" width="113" height="23">
						</van-radio>
					</van-cell>
				</van-cell-group>
			</van-radio-group>
		</div>
		<van-button class="pay_submit" @click="paySubmit" :loading="isSubmit" type="primary" bottomAction>去支付</van-button>
		
	</div>
</template>

<script>
	import * as type from '@/Enums/'
	import common_mixins from '@/views/mixins/common'
	export default {
		name: 'payment',
		mixins: [common_mixins],
		data() {
			return {
				payFormHtml: '',
				payShow: false,
				isSubmit: false,
				payWay: '2',
				orderItem: {},
				jsAPIConfig: {},
				testRes: {},
				wxEnv:false
			};
		},
		fliters: {
			yuan(val) {
				return val + " 元"
			}
		},
		created() {
			this.orderItem = this.$store.getters.setSubmitgoodsOrder
			if (this.orderItem.orderNo == null || this.orderItem.orderPrice == null) {
				this.orderItem.orderNo = this.$route.query.orderNo
				this.orderItem.orderPrice = this.$route.query.orderPrice
			}
			this.checkWxEnv();
		},
		methods: {
			paySubmit() {
				this.showLoadingToast();
				let _self = this;
				let params = {
					payType: this.payWay,
					orderNo: this.orderItem.orderNo
				}
				this.$store.dispatch('getOrderPayByType', params).then(res => {
					_self.testRes = res;
					_self.closeLoaddingToast();
					if (res.payType == '1') {
						if (res.data.trade_type == 'JSAPI') {
							_self.jsAPIConfig = res.data.data;
							if (typeof WeixinJSBridge == "undefined") {
								if (document.addEventListener) {
									document.addEventListener('WeixinJSBridgeReady', _self.wxJSAPIPay, false);
								} else if (document.attachEvent) {
									document.attachEvent('WeixinJSBridgeReady', _self.wxJSAPIPay);
									document.attachEvent('onWeixinJSBridgeReady', _self.wxJSAPIPay);
								}
							} else {
								_self.wxJSAPIPay();
							}
						} else {
							debugger;
							if(res.data.data == null){
								_self.showErrorNotify('调用微信支付失败，请稍后再试');
								return;
							}
							window.location.href = res.data.data;
							_self.$dialog.confirm({
								  title: '支付提示',
								  message: '是否完成支付?',
								  beforeClose:_self.orderPayStatusCheck
							});
						}
					} else if (res.payType == '2') {
						document.write(res.data);
					}
				}).catch(err => {
					_self.closeLoaddingToast();
					this.testRes = err;
					if (typeof(err) != String) {
						_self.showErrorNotify('支付失败！');
					} else {
						_self.showErrorNotify(err);
					}
				})
			},
			wxJSAPIPay() {
				let config = this.jsAPIConfig;
				let _self = this;
				WeixinJSBridge.invoke(
					'getBrandWCPayRequest', config,
					function(res) {
						if (res.err_msg == "get_brand_wcpay_request:ok") {
							_self.orderPayStatusCheck();
						} else {
							//支付失败
							_self.$router.push({
								path: '/payFail',
								query: {
									orderNo:_self.orderItem.orderNo
								}
							});
						}
						//alert(res);
						//_self.testRes = res;
					});
			},
			orderPayStatusCheck(){
				let _self = this;
				_self.$store.dispatch('getOrderPayStatus', {orderNo: _self.orderItem.orderNo}).then(res => {
					_self.$dialog.close();
					//支付成功
					_self.$router.push({
						path: '/paySuccess',
						query: {
							orderNo:_self.orderItem.orderNo
						}
					});
				}).catch(res=>{
					_self.$dialog.close();
					//支付失败
					_self.$router.push({
						path: '/payFail',
						query: {
							orderNo:_self.orderItem.orderNo
						}
					});
				})
			},checkWxEnv(){
				let ua = navigator.userAgent.toLowerCase();
				this.wxEnv = ua.match(/MicroMessenger\/[0-9]/i);
			}
		}
	};
</script>

<style scoped>
	.van-cell {
		text-align: left;
	}

	.payment_group {
		margin-bottom: 10px;
	}

	.time_down {
		background-color: #fffeec;
		padding: 10px 15px;
	}

	.pay_submit {
		/* position: fixed;
  bottom: 0; */
		margin-top: 20px;
		width: 100%;
	}

	.pay_way_group img {
		vertical-align: middle;
	}

	.pay_way_title {
		padding: 15px;
		background-color: #fff;
	}
</style>
